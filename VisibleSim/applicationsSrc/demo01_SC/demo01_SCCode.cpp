/**
 * @file demo01_SCCode.cpp
 * Generated by VisibleSim BlockCode Generator
 * (https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#)
 * @author Beno√Æt Piranda
 * @date 2022-09-07
 **/
 #include "demo01_SCCode.hpp"

Demo01_SCCode::Demo01_SCCode(SlidingCubesBlock *host):SlidingCubesBlockCode(host),module(host) {
    // @warning Do not remove block below, as a blockcode with a NULL host might be created
    //  for command line parsing
    if (not host) return;

    // Registers a callback (myBroadcastFunc) to the message of type R
    addMessageEventFunc2(BROADCAST_MSG_ID,
                       std::bind(&Demo01_SCCode::myBroadcastFunc,this,
                       std::placeholders::_1, std::placeholders::_2));

}

void Demo01_SCCode::startup() {
    console << "start " << module->blockId << "\n";
    setColor(startColor);
    if (sourceDir!=Cell3DPosition(0,0,0)) { // code for module whith sourceDir
        setColor(RED);
        auto connectors = getAllConnectedInterfaces();
        if (connectors.find(SCLattice2::PlusX)!=connectors.end()) { // if connected send PURPLE color
            sendMessage(new MessageOf<int>(BROADCAST_MSG_ID, 18), connectors[SCLattice2::PlusX], 1000, 0);
        }
	}
    if (sourceOmni) { // code for module#3 only
        setColor(WHITE);
        auto connectors = getAllConnectedInterfaces();
        int i=1;
        for (auto p:connectors) {
            sendMessage(new MessageOf<int>(BROADCAST_MSG_ID, i++), p.second, 1000, 0);
        }
    }
}

void Demo01_SCCode::myBroadcastFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface*sender) {
    MessageOf<int>* msg = static_cast<MessageOf<int>*>(_msg.get());
    int msgData = *msg->getData();
    setColor(msgData);
}

void Demo01_SCCode::parseUserBlockElements(TiXmlElement *config) {
    sourceDir=Cell3DPosition(0,0,0);
    sourceOmni=false;
    const char *attr = config->Attribute("sourceDir");

    sourceDir = (attr!=nullptr?Simulator::extractCell3DPositionFromString(attr):Cell3DPosition(0,0,0));
    attr = config->Attribute("sourceOmni");
    sourceOmni = (attr!=nullptr?Simulator::extractBoolFromString(attr):false);
}

void Demo01_SCCode::parseUserElements(TiXmlDocument *config) {
    TiXmlNode *node = config->FirstChild("parameters");
    if (!node) return;
    TiXmlElement *element = node->ToElement();
    const char *attr = element->Attribute("startColor");
    startColor=(attr!=nullptr?Simulator::extractColorFromString(attr):GREY);
}
