/**
 * @file e1_FloodingCode.cpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2022-09-20
 **/
 #include "e1_floodingCode.hpp"

E1_FloodingCode::E1_FloodingCode(BlinkyBlocksBlock *host):BlinkyBlocksBlockCode(host),module(host) {
    // @warning Do not remove block below, as a blockcode with a NULL host might be created
    //  for command line parsing
    if (not host) return;

    // Registers a callback (myBroadcastFunc) to the message of type R
    addMessageEventFunc2(BROADCAST_MSG_ID,
                       std::bind(&E1_FloodingCode::myBroadcastFunc,this,
                       std::placeholders::_1, std::placeholders::_2));

}

void E1_FloodingCode::startup() {
    console << "start " << getId() << "\n";

    if (isLeader) {
        myDistance=0;
        setColor(RED);
        sendMessageToAllNeighbors("initial",
            new MessageOf<int>(BROADCAST_MSG_ID,1), 100, 1000, 0);
    } else myDistance=10000;
}

void E1_FloodingCode::myBroadcastFunc(std::shared_ptr<Message>_msg, P2PNetworkInterface*sender) {
    MessageOf<int>* msg = static_cast<MessageOf<int>*>(_msg.get());
    int msgData = *msg->getData();

    console << "rcv " << msgData << " from " << sender->getConnectedBlockBId() << "\n";
    if (myDistance>msgData) {
        myDistance = msgData;
        setColor(msgData);
        sendMessageToAllNeighbors("next",
            new MessageOf<int>(BROADCAST_MSG_ID,msgData + 1), 100, 1000, 1, sender);
    }
}

void E1_FloodingCode::parseUserBlockElements(TiXmlElement *config) {
    const char *attr = config->Attribute("leader");
    if (attr!=nullptr) {
        std::cout << getId() << " is leader!" << std::endl; // complete with your code
        isLeader=true;
    }
}
