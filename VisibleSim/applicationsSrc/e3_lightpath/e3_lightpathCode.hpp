/**
 * @file e3_LightPathCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2022-09-20
 **/

#ifndef E3_LightPathCode_H_
#define E3_LightPathCode_H_
#include "robots/blinkyBlocks/blinkyBlocksSimulator.h"
#include "robots/blinkyBlocks/blinkyBlocksWorld.h"
#include "robots/blinkyBlocks/blinkyBlocksBlockCode.h"

static const int GO_MSG_ID = 1001;
static const int BACK_MSG_ID = 1002;
static const int LIGHT_MSG_ID = 1003;

using namespace BlinkyBlocks;

class E3_LightPathCode : public BlinkyBlocksBlockCode {
private:
	BlinkyBlocksBlock *module = nullptr;
	bool isLeader=false;
	int myDistance;
	int myNbWaitedAnswer;
    P2PNetworkInterface *myLongestChild;
    int myLongestChildDist;
    P2PNetworkInterface *myParent;
public :
	E3_LightPathCode(BlinkyBlocksBlock *host);
	~E3_LightPathCode() {};

/**
  * This function is called on startup of the blockCode, it can be used to perform initial
  *  configuration of the host or this instance of the program.
  * @note this can be thought of as the main function of the module
  */
    void startup() override;

/**
  * @brief Message handler for the message 'Go'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
   void myGoFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Message handler for the message 'Back'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
    void myBackFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

    /**
  * @brief Message handler for the message 'Back'
  * @param _msg Pointer to the message received by the module, requires casting
  * @param sender Connector of the module that has received the message and that is connected to the sender
  */
    void myLightFunc(std::shared_ptr<Message>_msg,P2PNetworkInterface *sender);

/**
  * @brief Provides the user with a pointer to the configuration file parser, which can be used to read additional user information from each block config. Has to be overridden in the child class.
  * @param config : pointer to the TiXmlElement representing the block configuration file, all information related to concerned block have already been parsed
  *
  */
    void parseUserBlockElements(TiXmlElement *config) override;

/*****************************************************************************/
/** needed to associate code to module                                      **/
	static BlockCode *buildNewBlockCode(BuildingBlock *host) {
	    return(new E3_LightPathCode((BlinkyBlocksBlock*)host));
	}
/*****************************************************************************/
};

#endif /* E3_LightPathCode_H_ */