
/**
 * @file mapElitesCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2024-01-27
 **/

#ifndef mapElitesCode_H_
#define mapElitesCode_H_

#include "neural_network.hpp"
#include "robot_utils.hpp"
#include "socket_connector.hpp"
#include "robots/catoms3D/catoms3DSimulator.h"
#include "robots/catoms3D/catoms3DWorld.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "robots/catoms3D/catoms3DMotionEngine.h"
#include "robots/catoms3D/catoms3DRotationEvents.h"
#include <vector>
#include <map>
#include <set>
#include <unordered_set>
static const int GO_MSG_ID = 1001;
static const int BACK_MSG_ID = 1002;
static const int WAKEUP_MSG_ID = 1003;
static const int ACKNOWLEDGE_MSG_ID = 1004;
static const int BROADCAST_MSG_ID = 1005;

using namespace Catoms3D;

// & Robot class

class mapElitesCode : public Catoms3DBlockCode
{
private:
    Catoms3DBlock *module = nullptr;
    int distance = 0;
    // int currentRound=0;
    int nbWaitedAnswers = 0;
    P2PNetworkInterface *parent = nullptr;
    bool isMoving = false;
    int moveTo = 0;
    int numberOfMoves = 200;
    SocketClient client;
    NeuralNetwork nn = NeuralNetwork(125, 2, 25, 27); // create the neural network
    vector<vector<int>> NNMovesMapping = {
        {0, 0, 0},
        {1, 0, 0},
        {-1, 0, 0},
        {0, 1, 0},
        {1, 1, 0},
        {-1, 1, 0},
        {0, -1, 0},
        {1, -1, 0},
        {-1, -1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {-1, 0, 1},
        {0, 1, 1},
        {1, 1, 1},
        {-1, 1, 1},
        {0, -1, 1},
        {1, -1, 1},
        {-1, -1, 1},
        {0, 0, -1},
        {1, 0, -1},
        {-1, 0, -1},
        {0, 1, -1},
        {1, 1, -1},
        {-1, 1, -1},
        {0, -1, -1},
        {1, -1, -1},
        {-1, -1, -1}};
    map<vector<int>, int> possibleMoves; // map of the possible moves; key is the move (ex (1,0,0)), value is the index of the move in the motions array
    


public:
    bool isLeader = false;
    mapElitesCode(Catoms3DBlock *host);
    ~mapElitesCode(){};

    /**
     * This function is called on startup of the blockCode, it can be used to perform initial
     *  configuration of the host or this instance of the program.
     * @note this can be thought of as the main function of the module
     */
    void startup() override;

    /**
     * @brief Message handler for the message 'go'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myGoFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message 'back'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myBackFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message 'wakeup'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myWakeupFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message `acknowledge`
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myAcknowledgeFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message `broadcast`
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myBroadcastFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Provides the user with a pointer to the configuration file parser, which can be used to read additional user information from each block config. Has to be overridden in the child class.
     * @param config : pointer to the TiXmlElement representing the block configuration file, all information related to concerned block have already been parsed
     *
     */
    void parseUserBlockElements(TiXmlElement *config) override;

    /**
      * @brief This function is called when a module is tapped by the user. Prints a message to the console by default.
         Can be overloaded in the user blockCode
      * @param face face that has been tapped
      */
    void onTap(int face) override;

    void onMotionEnd() override;

    int findNeighborPort(const Catoms3DBlock *neighbor);

    void moveToN(int n);

    void onInterruptionEvent(shared_ptr<Event> event) override;

    void onEndOfSimulation() override;

    // & utility functions for the robot

    void computePossibleMoves();

    int getBestMoveIndex(vector<double> output);

    void moveFromOutput(int index);

    map<bID, BaseSimulator::BuildingBlock *> getLeaders();

    vector<vector<int>> getEndOfSimulationPositions();

    int getTotalNumberOfMoves();

    /**
     * @brief Get the robots around the current robot
     * 
     * @param radius the radius of the cube around the robot (ex: 1 for a 3x3x3 cube, 2 for a 5x5x5 cube)
     * @return vector<bool> a vector of booleans representing the presence of a robot in the cube around the robot
     * 
     * @note the vector is ordered as follows : starting from the bottom left corner (the one with lower coordinates) and going to the top right corner (the one with higher coordinates), it first increases the x coordinate, then the y coordinate, and finally the z coordinate
    */
    vector<bool> getRobotsArround(int radius);

    /**
     * @brief Print the robots around the current robot
     * 
     * @param robotsAround the vector of booleans representing the presence of a robot in the cube around the robot
    */
    void printRobotsAround(vector<bool> robotsAround);

    /*****************************************************************************/
    /** needed to associate code to module                                      **/
    static BlockCode *buildNewBlockCode(BuildingBlock *host)
    {
        return (new mapElitesCode((Catoms3DBlock *)host));
    }
    /*****************************************************************************/
};

#endif /* mapElitesCode_H_ */