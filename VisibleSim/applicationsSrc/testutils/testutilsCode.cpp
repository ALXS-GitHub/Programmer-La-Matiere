
/**
 * @file testutilsCode.cpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2024-01-27
 **/

#include "testutilsCode.hpp"
#include "neural_network.hpp"
#include "robots/catoms3D/catoms3DMotionEngine.h"
#include "robots/catoms3D/catoms3DRotationEvents.h"
#include <thread>
#include <chrono>
#include <set>
#include <unordered_set>

// & Utils

unordered_set<vector<int>, Utils::CoordinatesHash> Utils::takenDestinations;

void Utils::addTakenDestination(vector<int> destination) {
    takenDestinations.insert(destination);
}

void Utils::removeTakenDestination(vector<int> destination) {
    takenDestinations.erase(destination);
}

bool Utils::isDestinationTaken(vector<int> destination) {
    return takenDestinations.find(destination) != takenDestinations.end();
}

void Utils::printTakenDestinations() {

    if (takenDestinations.empty()) {
        cout << "No taken destinations" << endl;
        return;
    }

    for (auto &dest : takenDestinations) {
        cout << "Destination : " << dest[0] << ", " << dest[1] << ", " << dest[2] << endl;
    }
}

// & Robot Code

testutilsCode::testutilsCode(Catoms3DBlock *host) : Catoms3DBlockCode(host), module(host)
{
    // @warning Do not remove block below, as a blockcode with a NULL host might be created
    //  for command line parsing
    if (not host)
        return;

    // Registers a callback (myGoFunc) to the message of type O
    addMessageEventFunc2(GO_MSG_ID,
                         std::bind(&testutilsCode::myGoFunc, this,
                                   std::placeholders::_1, std::placeholders::_2));

    // Registers a callback (myBackFunc) to the message of type C
    addMessageEventFunc2(BACK_MSG_ID,
                         std::bind(&testutilsCode::myBackFunc, this,
                                   std::placeholders::_1, std::placeholders::_2));

    // Registers a callback (myWakeupFunc) to the message of type E
    addMessageEventFunc2(WAKEUP_MSG_ID,
                         std::bind(&testutilsCode::myWakeupFunc, this,
                                   std::placeholders::_1, std::placeholders::_2));

    addMessageEventFunc2(ACKNOWLEDGE_MSG_ID,
                         std::bind(&testutilsCode::myAcknowledgeFunc,
                                   this,
                                   std::placeholders::_1,
                                   std::placeholders::_2));

    // Registers a callback (myGoFunc) to the message of type O
    addMessageEventFunc2(BROADCAST_MSG_ID,
                         std::bind(&testutilsCode::myBroadcastFunc, this,
                                   std::placeholders::_1, std::placeholders::_2));

    // ? set the weights of the neural network
    vector<vector<vector<double>>> weights = {{{-1,10.5},{-1,0},{1,-10.4},{-1,0},{0.0501,0}}}; // x+bias -> motion (0,2,4,6,no move)
    nn.setActivationFunction("relu");
    nn.setActivationFunctionOutput("relu");
    nn.setWeights(weights);
}

void testutilsCode::startup()
{
    // console << "start " << getId() << "\n";
    // console << "isInTarget" << target->isInTarget(module->position) << "\n";

    if (isLeader)
    {
        console << "start " << getId() << "\n";
        module->setColor(RED);
        // nbWaitedAnswers = sendMessageToAllNeighbors("distance", new MessageOf<int>(BROADCAST_MSG_ID, distance + 1), 1000, 100, 0);

        // move forward
        // ! be careful to use the onMotionEnd function to check if the motion is ended

        vector<std::pair<const Catoms3DMotionRulesLink*, Catoms3DRotation>> motions =
          Catoms3DMotionEngine::getAllRotationsForModule(module);
        console << "motions size : " << motions.size() << "\n";
        auto motion=motions.begin();
        bool found=false;

        Cell3DPosition position = module->position;
        console << "module position : " << position << "\n";

        while (motion!=motions.end() && !found) {
            console << motion->second.pivot << "\n";
            int pivotPort = findNeighborPort((*motion).second.pivot);
            console << "pivotPort : " << pivotPort << "\n";
            Cell3DPosition finalPos;

            short finalOrient;  
            (*motion).second.getFinalPositionAndOrientation(finalPos, finalOrient);
            Cell3DPosition d = finalPos - position;
            console << "finalPos : " << finalPos << "\n";
            console << "finalOrient : " << finalOrient << "\n";
            // elem.first->isOctaFace(), elem.first->getConFromID(),elem.first->getConToID(),
            console << "isOctaFace : " << (*motion).first->isOctaFace() << "\n";
            console << "getConFromID : " << (*motion).first->getConFromID() << "\n"; // same as pivotPort
            console << "getConToID : " << (*motion).first->getConToID() << "\n";
            console << "(dx, dy, dz) : " << d << "\n";
            motion++;
        }

        // moveToFirst();
        // moveToN(0);
        this->onMotionEnd();
    }
}
void testutilsCode::myGoFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender)
{
    MessageOf<int> *msg = static_cast<MessageOf<int> *>(_msg.get());
    int msgData = *msg->getData();
}

void testutilsCode::myBackFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender)
{
    // MessageOf<int>* msg = static_cast<MessageOf<int>*>(_msg.get());
    // int msgData = *msg->getData();
}

void testutilsCode::myWakeupFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender)
{
}

void testutilsCode::myAcknowledgeFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender)
{

    // ? la fonction Acknowledge sert à retourner le message de confirmation de la réception du message broadcast

    nbWaitedAnswers--; // on diminue le nombre de messages attendus, en effet on a reçu la confirmation d'un module
    console << "rec. Ack(" << nbWaitedAnswers << ") from " << sender->getConnectedBlockId() << "";
    if (nbWaitedAnswers == 0)
    { // si on a reçu toutes les confirmations
        if (parent == nullptr)
        { // si on est le leader
            setColor(-1);
        }
        else
        { // sinon on envoie un message de confirmation au parent
            sendMessage("ack2parent", new Message(ACKNOWLEDGE_MSG_ID), parent, 1000, 100);
        }
    }
}

void testutilsCode::myBroadcastFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender)
{
    // no broadcast in this version
}

void testutilsCode::parseUserBlockElements(TiXmlElement *config)
{
    const char *attr = config->Attribute("leader");
    isLeader = (attr ? Simulator::extractBoolFromString(attr) : false);
    if (isLeader)
    {
        std::cout << getId() << " is leader!" << std::endl; // complete with your code
    }
}

void testutilsCode::onTap(int face)
{
    // use onTap by ctrl + right click and then select "Tap"
    std::cout << "Block 'tapped':" << getId() << std::endl; // complete with your code here
    moveToN(1);
    std::cout << "Current Position: " << module->position << std::endl;

}

void testutilsCode::onMotionEnd()
{

    // clear the taken destination
    vector<int> posVect = {module->position[0], module->position[1], module->position[2]};
    Utils::removeTakenDestination(posVect); 

    // use onMotionEnd by ctrl + right click and then select "MotionEnd"
    moveTo++;
    // std::cout << "Motion ended" << std::endl; // complete with your code here
    isMoving = false;
    numberOfMoves--;
    if (numberOfMoves > 0) { // do not move if we have reached the limit of moves
        // wait one second before moving again
        scheduler->schedule(new InterruptionEvent<int>(scheduler->now() + 1000000, module, 1)); // time is in microseconds
    }
}

int testutilsCode::findNeighborPort(const Catoms3DBlock *neighbor) {
            int i=0;
  while (i<FCCLattice::MAX_NB_NEIGHBORS && module->getNeighborBlock(i)!=neighbor) {
            i++;
  }
  return (i<FCCLattice::MAX_NB_NEIGHBORS?i:-1);
}

void testutilsCode::moveStupid() {
    vector<std::pair<const Catoms3DMotionRulesLink*, Catoms3DRotation>> motions =
          Catoms3DMotionEngine::getAllRotationsForModule(module);
    auto motion=motions.begin();
    scheduler->schedule(new Catoms3DRotationStartEvent(scheduler->now() + 1000, module, (*motion).second));
}

void testutilsCode::moveToFirst() {
    // move to the first possible rotation
    isMoving = true;
    vector<std::pair<const Catoms3DMotionRulesLink*, Catoms3DRotation>> motions =
          Catoms3DMotionEngine::getAllRotationsForModule(module);
    auto motion=motions.begin();
    bool found=false;
    while (motion!=motions.end() && !found) {
        scheduler->schedule(new Catoms3DRotationStartEvent(scheduler->now() + 1000, module, (*motion).second));
        found=true;
        motion++;
    }
}

// TODO : optimise this later
void testutilsCode::moveToN(int n) {
    // move to the nth possible rotation
    isMoving = true;
    vector<std::pair<const Catoms3DMotionRulesLink*, Catoms3DRotation>> motions =
          Catoms3DMotionEngine::getAllRotationsForModule(module);
    auto motion=motions.begin();
    int i=0;
    bool found=false;
    Cell3DPosition position = module->position;
    while (i < n) {

        if (motion==motions.end()) {
            console << "No motion found" << "\n";
            cout << "No motion found" << endl;
            return;
        }
        i++;
        motion++;
    }
    if (i==n) {
        scheduler->schedule(new Catoms3DRotationStartEvent(scheduler->now() + 1000, module, (*motion).second));
        found=true;
    }
}

int getMaxIndex(vector<double> output) {
    int index = 0;
    double max = output[0];
    for (int i = 1; i < output.size(); i++) {
        if (output[i] > max) {
            max = output[i];
            index = i;
        }
    }
    return index;
}

void testutilsCode::onInterruptionEvent(shared_ptr<Event> event) {

    auto data = dynamic_cast<InterruptionEvent<int> *>(event.get())->data;

    if (data == 2) { // no move interruption (to simulate the same duration as a normal move)
        this->onMotionEnd();
        return;
    }

    // cout << "data is " << data << endl;

    // std::cout << "Interruption Ended" << std::endl; // complete with your code here
    // vector<double> output = nn.feedForward(previousMoves);
    // console << "Output : " << output[0] << ", " << output[1] << ", " << output[2] << ", " << output[3] << "\n";

    // // get the index of the maximum value
    // int index = getMaxIndex(output);
    // moveTo = index*2; // to get the 0, 2, 4, 6
    // previousMoves = {0, 0, 0, 0};
    // previousMoves[index] = 1;
    // moveToN(moveTo);
    Cell3DPosition position = module->position;
    double px = position[0];
    vector<double> output = nn.feedForward({px});
    console << "Output : " << output[0] << ", " << output[1] << ", " << output[2] << ", " << output[3] << ", " << output[4] << "\n";

    computePossibleMoves();
    int bestMove = getBestMoveIndex(output);
    moveFromOutput(bestMove);
}

void testutilsCode::onEndOfSimulation() {
    // !! the onEndOfSimulation function is called at the end of the simulation for only ONE module !!
    console << "End of simulation" << "\n";
    cout << "End of simulation" << endl;
    
    // ? so we need to get all the modules from the world
    map<bID, BaseSimulator::BuildingBlock *> modules = BaseSimulator::getWorld()->getMap();
    // get all leaders
    for (auto &elem : modules) { // ? iterate over all modules
        testutilsCode *blockCode = dynamic_cast<testutilsCode *>(elem.second->blockCode); // ? typecast the blockcode to testutilsCode to access the isLeader variable (and specific module data)
        if (blockCode->isLeader) { // ? check if the module is a leader
            console << "Leader Id : " << elem.first << "\n";
            cout << "Leader Id : " << elem.first << endl;
            blockCode->module->setColor(WHITE);
            console << "Final position : " << blockCode->module->position << "\n"; // ? print the final position of the leader
            cout << "Final position : " << blockCode->module->position << endl;
            console << "Module Id" << elem.first << "\n";
            cout << "Module Id" << elem.first << endl;
        }
    }

    // testing the getEndOfSimulationPositions function
    cout << "End of simulation positions :" << endl;
    vector<vector<int>> positions = getEndOfSimulationPositions();
    for (auto &pos : positions) {
        cout << "Position : " << pos[0] << ", " << pos[1] << ", " << pos[2] << endl;
    }
}

// & utilities

void testutilsCode::computePossibleMoves() {

    possibleMoves.clear(); // ! important to clear the map before adding new values

    vector<std::pair<const Catoms3DMotionRulesLink*, Catoms3DRotation>> motions = Catoms3DMotionEngine::getAllRotationsForModule(module);
    Cell3DPosition position = module->position;

    int i = 0;
    for (auto &motion:motions) {
        Cell3DPosition finalPos;
        short finalOrient;
        motion.second.getFinalPositionAndOrientation(finalPos, finalOrient);

        Cell3DPosition d = finalPos - position;
        vector<int> move = {d[0], d[1], d[2]};

        possibleMoves[move] = i;
        i++;
    }
    
    // ad the (0,0,0) move
    possibleMoves[{0,0,0}] = i;
}

/**
 * @brief Get the index of the best move from the output of the neural network
 * 
 * @param output output of the neural network
 * @return int index of the best move (index of the output)
 * @note use the moveFromOutput function to get the move from the given index
*/
int testutilsCode::getBestMoveIndex(vector<double> output) {

    int index = -1;
    double max = -INFINITY;

    for (int i = 0; i < output.size(); i++) {
        if (possibleMoves.find(NNMovesMapping[i]) != possibleMoves.end()) {

            if (Utils::isDestinationTaken({module->position[0] + NNMovesMapping[i][0], module->position[1] + NNMovesMapping[i][1], module->position[2] + NNMovesMapping[i][2]})) {
                continue;
            }

            if (output[i] > max) {
                max = output[i];
                index = i;
            }
        }
    }
    return index;
}

void testutilsCode::moveFromOutput(int index) {

    vector<int> destinationVector = {module->position[0] + NNMovesMapping[index][0], module->position[1] + NNMovesMapping[index][1], module->position[2] + NNMovesMapping[index][2]};
    Utils::addTakenDestination(destinationVector); // ! important to keep track of the taken destinations, release this position when the motion is ended

    if (index == -1) {
        console << "No move found" << "\n";
        cout << "No move found" << endl;
        this->onMotionEnd();
        return;
    }

    vector<int> nullvect = {0,0,0};
    if (NNMovesMapping[index] == nullvect) {
        scheduler->schedule(new InterruptionEvent<int>(scheduler->now() + Catoms3DRotation::ANIMATION_DELAY, module, 2)); // get the normal move duration and send it as a data=2 interruption type
    } else {
        moveToN(possibleMoves[NNMovesMapping[index]]);
    }
}

map<bID, BaseSimulator::BuildingBlock *> testutilsCode::getLeaders() {
    map<bID, BaseSimulator::BuildingBlock *> modules = BaseSimulator::getWorld()->getMap();
    map<bID, BaseSimulator::BuildingBlock *> leaders;
    for (auto &elem : modules) {
        testutilsCode *blockCode = dynamic_cast<testutilsCode *>(elem.second->blockCode);
        if (blockCode->isLeader) {
            leaders[elem.first] = elem.second;
        }
    }
    return leaders;
}

vector<vector<int>> testutilsCode::getEndOfSimulationPositions() {
    vector<vector<int>> positions;

    map<bID, BaseSimulator::BuildingBlock *> modules = BaseSimulator::getWorld()->getMap();
    for (auto &elem : modules) {
        testutilsCode *blockCode = dynamic_cast<testutilsCode *>(elem.second->blockCode);
        if (blockCode->isLeader) {
            vector<int> pos = {blockCode->module->position[0], blockCode->module->position[1], blockCode->module->position[2]};
            positions.push_back(pos);
        }
    }

    return positions;
}
