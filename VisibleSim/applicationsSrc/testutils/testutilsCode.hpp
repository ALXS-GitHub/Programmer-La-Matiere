
/**
 * @file testutilsCode.hpp
 * Generated by VisibleSim BlockCode Generator
 * https://services-stgi.pu-pm.univ-fcomte.fr/visiblesim/generator.php#
 * @author yourName
 * @date 2024-01-27
 **/

#ifndef testutilsCode_H_
#define testutilsCode_H_

#include "neural_network.hpp"
#include "robots/catoms3D/catoms3DSimulator.h"
#include "robots/catoms3D/catoms3DWorld.h"
#include "robots/catoms3D/catoms3DBlockCode.h"
#include "robots/catoms3D/catoms3DMotionEngine.h"
#include "robots/catoms3D/catoms3DRotationEvents.h"
#include <vector>
#include <map>
#include <set>
#include <unordered_set>
static const int GO_MSG_ID = 1001;
static const int BACK_MSG_ID = 1002;
static const int WAKEUP_MSG_ID = 1003;
static const int ACKNOWLEDGE_MSG_ID = 1004;
static const int BROADCAST_MSG_ID = 1005;

using namespace Catoms3D;

// & Utils class
// !!!!!!!!! This should be in the simulator, but for easier access, we put it here !!!!!!!!!

class Utils
{
    public:
        struct CoordinatesHash {
            size_t operator()(const std::vector<int>& v) const {
                std::hash<int> hasher;
                size_t seed = 0;
                for (int i : v) {
                    seed ^= hasher(i) + 0x9e3779b9 + (seed<<6) + (seed>>2);
                }
                return seed;
            }
        };
        static unordered_set<vector<int>, CoordinatesHash> takenDestinations; // list of the destinations already taken (to avoid having two modules going to the same destination)
        static void addTakenDestination(vector<int> destination);
        static void removeTakenDestination(vector<int> destination);
        static bool isDestinationTaken(vector<int> destination);
        static void printTakenDestinations(); // Especially for debugging

};
// !*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!*!

// & Robot class

class testutilsCode : public Catoms3DBlockCode
{
private:
    Catoms3DBlock *module = nullptr;
    int distance = 0;
    // int currentRound=0;
    int nbWaitedAnswers = 0;
    P2PNetworkInterface *parent = nullptr;
    bool isMoving = false;
    int moveTo = 0;
    int numberOfMoves = 12;
    NeuralNetwork nn = NeuralNetwork(1, 0, 4, 5, true); // for movements 0, 2, 4, 6, no move
    vector<vector<int>> NNMovesMapping = {{1,0,0}, {0,1,0}, {-1,0,0}, {0,-1,0}, {0,0,0}}; // get the mapping of the moves for the output of the neural network
    map<vector<int>, int> possibleMoves; // map of the possible moves; key is the move (ex (1,0,0)), value is the index of the move in the motions array
    


public:
    bool isLeader = false;
    testutilsCode(Catoms3DBlock *host);
    ~testutilsCode(){};

    /**
     * This function is called on startup of the blockCode, it can be used to perform initial
     *  configuration of the host or this instance of the program.
     * @note this can be thought of as the main function of the module
     */
    void startup() override;

    /**
     * @brief Message handler for the message 'go'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myGoFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message 'back'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myBackFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message 'wakeup'
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myWakeupFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message `acknowledge`
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myAcknowledgeFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Message handler for the message `broadcast`
     * @param _msg Pointer to the message received by the module, requires casting
     * @param sender Connector of the module that has received the message and that is connected to the sender
     */
    void myBroadcastFunc(std::shared_ptr<Message> _msg, P2PNetworkInterface *sender);

    /**
     * @brief Provides the user with a pointer to the configuration file parser, which can be used to read additional user information from each block config. Has to be overridden in the child class.
     * @param config : pointer to the TiXmlElement representing the block configuration file, all information related to concerned block have already been parsed
     *
     */
    void parseUserBlockElements(TiXmlElement *config) override;

    /**
      * @brief This function is called when a module is tapped by the user. Prints a message to the console by default.
         Can be overloaded in the user blockCode
      * @param face face that has been tapped
      */
    void onTap(int face) override;

    void onMotionEnd() override;

    int findNeighborPort(const Catoms3DBlock *neighbor);

    void moveStupid();

    void moveToFirst();

    void moveToN(int n);

    void onInterruptionEvent(shared_ptr<Event> event) override;

    void onEndOfSimulation() override;

    // & utility functions

    void computePossibleMoves();

    int getBestMoveIndex(vector<double> output);

    void moveFromOutput(int index);

    map<bID, BaseSimulator::BuildingBlock *> getLeaders();

    vector<vector<int>> getEndOfSimulationPositions();

    /*****************************************************************************/
    /** needed to associate code to module                                      **/
    static BlockCode *buildNewBlockCode(BuildingBlock *host)
    {
        return (new testutilsCode((Catoms3DBlock *)host));
    }
    /*****************************************************************************/
};

#endif /* testutilsCode_H_ */